@page "/"

@using System.Net
@using System.Security.Claims
@using System.Reflection
@using System.Text
@using System.Text.Json
@using System.Web
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers
@using System.Text.Json.Serialization

@layout EmptyLayout

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<div style="height: 100vh;  display: flex; justify-content: center; align-items: center; flex-direction: row">
   <div style="height: 100vh;  display: flex; justify-content: center; align-items: center; flex-direction: column">
      <div style="border: 1px solid darkgray; display: flex; 
         flex-direction: column; justify-content: center; 
         align-items: center; 
         height: 500px; width: 500px; 
         gap: 10px;
         background-color: #fffde7; color: #170a0a
         ">
         <h3>Login</h3>
         <button @onclick="GetAuthorizationCode">
            <pre>Login with Linkedin</pre>
         </button>
         <pre>or</pre>
         <input type="text" @bind="Email" placeholder="Email"/>
         <input type="text" @bind="Password" placeholder="Password"/>
         <button @onclick="NormalLogin">
            <pre>Sign me up!</pre>
         </button>
      </div>
      <div style="border: 1px solid darkgray; display: flex; 
         flex-direction: column; justify-content: start; 
         align-items: start; 
         height: 360px; width: 500px; 
         padding: 1rem;
         background-color: #fffde7; color: #170a0a;
         flex-wrap: nowrap;
         ">
         <pre>Endpoints:</pre>
         <div style="
            display: flex;
            flex-direction: column;
            gap: 5px;
            width: 100%;
            padding: 1rem;
            word-wrap: break-word;
            overflow-wrap: break-word;
            ">
            <button @onclick="NavToProfile">
                <pre>Go to profile page</pre>
            </button>
            <button @onclick="GetLinkedinRefreshToken">
                <pre>Get Refresh Token From Linkedin</pre>
            </button>
            <button @onclick="GetApiRefreshToken">
                <pre>Get Refresh Token From Api</pre>
            </button>
         </div>
      </div>
   </div>
   <!--User data start--> 
   <div style="height: 100vh;  display: flex; justify-content: center; align-items: center; flex-direction: column">
      <div style="border: 1px solid darkgray; display: flex; 
         flex-direction: column; justify-content: center; 
         align-items: center; 
         height: 500px; width: 500px; 
         gap: 10px;
         background-color: #fffde7; color: #170a0a
         ">
         <h3>User</h3>
         @if (user is null)
         {
         <div style="
            width: 100%;
            padding: 1rem;
            word-wrap: break-word;
            overflow-wrap: break-word;
            ">
         </div>
         }
         else
         {
         <div style="display: flex; font-size: 20px">
            <pre>Name: </pre>
            <pre style="background-color: #ffefd2">@user.Name</pre>
         </div>
         <div style="display: flex; font-size: 20px">
            <pre>Email: </pre>
            <pre style="background-color: #ffefd2">@user.Email</pre>
         </div>
         <div style="display: flex; font-size: 20px">
            <pre>Picture: </pre>
            <img src="@user.Picture"/>
         </div>
         }
      </div>
      <div style="border: 1px solid darkgray; display: flex; 
         flex-direction: column; justify-content: start; 
         align-items: start; 
         height: 360px; width: 500px; 
         padding: 1rem;
         background-color: #fffde7; color: #170a0a;
         flex-wrap: nowrap;
         ">
         <pre>Endpoints:</pre>
         <div style="
            width: 100%;
            padding: 1rem;
            display:flex;
            flex-direction: column;
            gap: 5px;
            word-wrap: break-word;
            overflow-wrap: break-word;
            ">
            <button @onclick="GetLinkedinToken">
               <pre>Get Access Token</pre>
            </button>
            <button @onclick="SaveCodeToLocalStorage">
               <pre>Save Code to Local Storage</pre>
            </button>
            <button @onclick="GetUserData">
               <pre>Get User Data From Linkedin</pre>
            </button>
            <button @onclick="GetUserDataFromIdToken">
               <pre>Get User Data</pre>
            </button>
         </div>
      </div>
   </div>
</div>
<style>
   button, input {
   border: 2px solid darkgray;
   background-color: #ffefd2;
   width: 450px;
   height: 60px;
   }
   input {
   padding: 0 10px; 
   }
   button {
   display: flex;
   align-items: center;
   justify-content: center;
   padding-top: 13px;
   }
</style>

@* ReSharper disable once InconsistentNaming *@
@code {
    public static readonly Action<object> print = Console.WriteLine;
    string? Email { get; set; }
    string? Password { get; set; }
    User? user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        print("init...");
        var localToken = await JS.InvokeAsync<string>("localStorage.getItem", "localToken");
        if (string.IsNullOrWhiteSpace(localToken))
        {
            print("nothing in local storage...");
            return;
        }
        var claims = new JwtSecurityToken(localToken).Payload;

        //user = new User(claims["id"].ToString() ?? "-1", claims["email"].ToString() ?? "example@email.com");
    }

    async Task GetLinkedinToken()
    {
        var code = await JS.InvokeAsync<string>("localStorage.getItem", "code");
        var response = await Http.PostAsJsonAsync("http://localhost:5000/linkedin/callback", code);
        print("response" + response.IsSuccessStatusCode);
        if (!response.IsSuccessStatusCode) return; 

        var tokenResponse = await response.Content.ReadAsStringAsync();

        await JS.InvokeVoidAsync("localStorage.setItem", "linkedinToken", tokenResponse);
    }

    async Task<bool> SaveCodeToLocalStorage()
    {
        var uri = new UriBuilder(Nav.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);
        var code = queryParams["code"] ?? "";

        if (string.IsNullOrWhiteSpace(code)) return false;
        await JS.InvokeVoidAsync("localStorage.setItem", "code", code);
        return true;
    }

    void GetAuthorizationCode()
    {
        // Redirect user to LinkedIn authorization endpoint
        // Grab secrets from configuration
        const string clientId = "77tgedfsh93yy3";
        const string redirectUri = "http://localhost:5215";

        // Link from linkedin docs
        var authorizationUrl = $"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&scope=openid%20email%20profile";

        Nav.NavigateTo(authorizationUrl);

        // TODO => Move the rest of this to the api, by setting the redirect uri to point to an api method 
        // Handle the redirect and extract the authorization code from the URL
        // Here we wait for linkedin to redirect back
        // and subscribe to the location changed event to capture the data.
        // We could also set up the redirect uri to point to a different page
        // and grab the code from there.
        // var tcs = new TaskCompletionSource<string>();

        // Grab the code from the query params,
        // TODO => Use global auth state to keep track
        // of user and share state between components
        // Nav.LocationChanged += (sender, args) =>
        // {
        //     var uri = new Uri(args.Location);
        //     var queryParams = HttpUtility.ParseQueryString(uri.Query);
        //     var code = queryParams["code"];
        //     if (!string.IsNullOrWhiteSpace(code)) tcs.SetResult(code);
        // };

        // return the task to await
        //return await tcs.Task;
    }

    async Task NormalLogin()
    {
        print("Normal login...");
        var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5000/login");
        request.Content = new StringContent(JsonSerializer.Serialize(new { email = Email, password = Password }), 
            encoding: Encoding.UTF8, "application/json");

        var result = await Http.SendAsync(request);

        if (!result.IsSuccessStatusCode)
        {
            print("result did not succeed");
            return;
        }

        var content = await result.Content.ReadAsStringAsync();
        content = content.Trim('"');

        await JS.InvokeVoidAsync("localStorage.setItem", "localToken", content);

        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(content);

        var claims = token.Payload;

        //user = new(claims["id"].ToString() ?? "-1", claims["email"].ToString() ?? "example@email.com");

    }

    async Task GetUserDataFromIdToken()
    {
        var stringToken = await JS.InvokeAsync<string>("localStorage.getItem", "linkedinToken");
        var token = JsonSerializer.Deserialize<LinkedinToken>(stringToken);
        if (token is null) return; 
    
        var jwt = token.IdToken;
        var handler = new JwtSecurityTokenHandler();
        var handledToken = handler.ReadJwtToken(jwt);

        var claims = handledToken.Payload;

        user = new(claims["id"].ToString() ?? "no id...", claims["name"].ToString() ?? "no name...", claims["email"].ToString() ?? "no email...", claims["picture"].ToString() ?? "no picture...");

    }

    async Task GetUserData()
    {
        var stringToken = await JS.InvokeAsync<string>("localStorage.getItem", "linkedinToken");
        var token = JsonSerializer.Deserialize<LinkedinToken>(stringToken);
        if (token is null) return;
        print(token.AccessToken ?? "");

        var response = await Http.PostAsJsonAsync("http://localhost:5000/userinfo", token.AccessToken);
        print("response " + response.IsSuccessStatusCode);
        if (!response.IsSuccessStatusCode) return; 


        var jsonContent = await response.Content.ReadAsStringAsync();
        User? content = JsonSerializer.Deserialize<User>(jsonContent);
        if(content is null) { print("nothing here..."); return; }

        user = new("", content.Name ?? "no name...", content.Email ?? "no email...",
                    content.Picture ?? "no picture...");
    }

    void GetApiRefreshToken() {
      throw new NotImplementedException();
    }

     void GetLinkedinRefreshToken() {
       throw new NotImplementedException(); 
    }

    void NavToProfile() {
        Nav.NavigateTo("profile");
    }

    public class User{
      [JsonPropertyName("id")]
      public string Id { get; set; } = "";
      [JsonPropertyName("name")]
      public string Name { get; set; } = "";
      [JsonPropertyName("email")]
      public string Email { get; set; } = "";
      [JsonPropertyName("picture")]
      public string Picture { get; set; } = "";

      public User() { }

      public User(string id, string name, string email, string picture)
      {
         Id = id;
         Name = name;
         Email = email;
         Picture = picture;
      }
   }

    public class LinkedinToken
    {
        [JsonPropertyName("access_token")]
        public string? AccessToken { get; set; }
        [JsonPropertyName("expires_in")]
        public int ExpiresIn { get; set; }
        [JsonPropertyName("scope")]
        public string? Scope { get; set; }
        [JsonPropertyName("token_type")]
        public string? TokenType { get; set; }
        [JsonPropertyName("id_token")]
        public string? IdToken { get; set; }

    }
}