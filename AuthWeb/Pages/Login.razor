@page "/Login"
@using System.Net
@using System.Text
@using System.Text.Json
@using System.Web
@layout EmptyLayout
@inject HttpClient Http
@inject JSRuntime JS
@inject NavigationManager Nav

<div style="height: 100vh;  display: flex; justify-content: center; align-items: center">
    <div style="border: 1px solid darkgray; display: flex; 
               flex-direction: column; justify-content: center; 
               align-items: center; 
               height: 500px; width: 500px; 
               gap: 10px;
               background-color: #fffde7; color: #170a0a
    ">
        <h3>Login</h3>

        <button @onclick="LinkedinLogin">
            <pre>Login with Linkedin</pre>
        </button>

        <pre>or</pre>

        <input type="text" @bind="Email" placeholder="Email"/>
        <input type="text" @bind="Password" placeholder="Password"/>

        <button @onclick="NormalLogin">
            <pre>Sign me up!</pre>
        </button>
        @if (user is not null)
        {
            <div>
                <pre>@user.Id</pre>
                <pre>@user.Email</pre>
                <pre>@user.Password</pre>
            </div>
        }
    </div>
</div>


<style>
   button, input {
       border: 2px solid darkgray;
       background-color: #ffefd2;
       width: 450px;
       height: 60px;
   }
   input {
       padding: 0 10px; 
   }
   button {
       display: flex;
       align-items: center;
       justify-content: center;
       padding-top: 13px;
   }
</style>

@* ReSharper disable once InconsistentNaming *@
@code {
    static readonly Action<object> print = Console.WriteLine;
    string? Email { get; set; }
    string? Password { get; set; }
    
    User? user { get; set; }

    protected override void OnInitialized()
    {
    }
    
    async Task LinkedinLogin()
    {
        var authorizationCode = await GetAuthorizationCode();
        
        var response = await Http.PostAsJsonAsync("http://localhost:5000/linkedin/callback", authorizationCode);
        if (!response.IsSuccessStatusCode) return;
        
        var tokenResponse = await response.Content.ReadAsStringAsync();

        // Store token in local storage
        await JS.InvokeVoidAsync("localStorage.setItem", "linkedinAccessToken", tokenResponse);
    }
    
    async Task<string> GetAuthorizationCode()
    {
        // Redirect user to LinkedIn authorization endpoint
        // Link from linkedin docs
        // Grab secrets from configuration
        string clientId = "";
        string redirectUri = "";
        
        var authorizationUrl = $"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&scope=r_liteprofile%20r_emailaddress";
        
        Nav.NavigateTo(authorizationUrl);

        // TODO => Move the rest of this to the api, by setting the redirect uri to point to an api method 
        
        // Handle the redirect and extract the authorization code from the URL
        // Here we wait for linkedin to redirect back
        // and subscribe to the location changed event to capture the data.
        // We could also set up the redirect uri to point to a different page
        // and grab the code from there.
        var tcs = new TaskCompletionSource<string>();
        
        // Grab the code from the query params,
        // TODO => Use global auth state to keep track
        // of user and share state between components
        Nav.LocationChanged += (sender, args) =>
        {
            var uri = new Uri(args.Location);
            var queryParams = HttpUtility.ParseQueryString(uri.Query);
            var code = queryParams["code"];
            if (!string.IsNullOrEmpty(code)) tcs.SetResult(code);
        };
        
        // return task to await
        return await tcs.Task;
    }

    async Task NormalLogin()
    {
        print("Normal login...");
        var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5000/login");
        request.Content = new StringContent(JsonSerializer.Serialize(new { email = Email, password = Password }), 
            encoding: Encoding.UTF8, "application/json");
        var result = await Http.SendAsync(request);

        if (!result.IsSuccessStatusCode)
        {
            print("result did not succeed");
            return;
        }

        var content = await result.Content.ReadAsStringAsync();
        user = JsonSerializer.Deserialize<User>(content);
    }

    record User(string Id, string Email, string Password);

}